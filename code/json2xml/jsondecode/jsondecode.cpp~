#include <jsoncpp/json/json.h>  
#include <iostream>
#include <string>
#include<fstream>
#include<queue>
typedef Json::Writer JsonWriter;
typedef Json::Reader JsonReader;
typedef Json::Value  JsonValue;
using namespace std;

void json_decode()
{
	std::ifstream is;
	is.open ("test.json", std::ios::binary );  

	//解析json数据
	JsonReader reader;
	JsonValue value;
	JsonValue temp;
	if (!reader.parse(is, value))
	{
		return 0;
	}

	temp=value;
	Json::Value val_parsed_text = temp["merged_res"]["semantic_form"]["parsed_text"];
	Json::Value val_raw_text = temp["merged_res"]["semantic_form"]["raw_text"];
	string parsed_text=val_parsed_text.asString();
	string raw_text=val_raw_text.asString();
	cout <<"parsed_text"<<"    "<<parsed_text<<endl;
	cout <<"raw_text"<<"    "<<raw_text<<endl;

   	int file_size = temp["merged_res"]["semantic_form"]["results"].size();
 
    	for(int i = 0; i < file_size; ++i)
   	{
      	Json::Value val_image = temp["merged_res"]["semantic_form"]["results"];
     	int image_size = val_image.size();
      	for(int j = 0; j < image_size; ++j)
      	{
        std::string type = val_image[j]["domain"].asString();
        std::string url = val_image[j]["intent"].asString();
	double sco=val_image[j]["score"].asDouble();
	cout <<"domain"<<"    "<<type<<endl;
	cout <<"intent"<<"    "<<url<<endl;
	cout <<"score"<<"     "<<sco<<endl;
	JsonValue ob=val_image[j]["object"];
	print_json(ob);
	is.close();
	}
	}	


}

void print_json(JsonValue data)
{
	JsonValue::Members mem = data.getMemberNames();
	for (auto iter = mem.begin(); iter != mem.end(); iter++)
	{
		//cout << *iter<< "\t: ";
		if (data[*iter].type() == Json::objectValue)
		{	
			print_json(data[*iter]);
 		}	
		else if (data[*iter].type() == Json::arrayValue)
		{
			cout << endl;
			auto cnt = data[*iter].size();
			for (auto i = 0; i < cnt; i++)
			{
				print_json(data[*iter][i]);
			}
		}
		else if (data[*iter].type() == Json::stringValue)
		{
			cout<<"输出key值"<<endl;
			cout<<*iter<<endl;
			string vava=data[*iter].asString() ;
			cout<<vava<<endl;
		}
		else if (data[*iter].type() == Json::realValue)
		{
			cout << data[*iter].asDouble() << endl;
		}
		else if (data[*iter].type() == Json::uintValue)
		{
			cout << data[*iter].asUInt() << endl;
		}
		else
		{
			cout << data[*iter].asInt() << endl;
		}
	}
	return;
}
int main()
{
	json_decode();

	return 0;
}

